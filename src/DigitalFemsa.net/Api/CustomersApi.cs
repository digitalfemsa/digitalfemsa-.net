/*
 * Femsa API
 *
 * Femsa sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@femsa.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DigitalFemsa.net.Client;
using DigitalFemsa.net.Model;

namespace DigitalFemsa.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse CreateCustomer(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> CreateCustomerWithHttpInfo(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Create Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Create Fiscal entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomerFiscalEntitiesResponse</returns>
        CreateCustomerFiscalEntitiesResponse CreateCustomerFiscalEntities(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Create Fiscal entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomerFiscalEntitiesResponse</returns>
        ApiResponse<CreateCustomerFiscalEntitiesResponse> CreateCustomerFiscalEntitiesWithHttpInfo(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Deleted a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse DeleteCustomerById(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Deleted a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> DeleteCustomerByIdWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Gets a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse GetCustomerById(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Gets a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> GetCustomerByIdWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a list of customers
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersResponse</returns>
        CustomersResponse GetCustomers(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of customers
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        ApiResponse<CustomersResponse> GetCustomersWithHttpInfo(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0);
        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// You can update customer-related data
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        CustomerResponse UpdateCustomer(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// You can update customer-related data
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        ApiResponse<CustomerResponse> UpdateCustomerWithHttpInfo(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Update  Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Update Fiscal Entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateCustomerFiscalEntitiesResponse</returns>
        UpdateCustomerFiscalEntitiesResponse UpdateCustomerFiscalEntities(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Update  Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Update Fiscal Entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateCustomerFiscalEntitiesResponse</returns>
        ApiResponse<UpdateCustomerFiscalEntitiesResponse> UpdateCustomerFiscalEntitiesWithHttpInfo(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> CreateCustomerAsync(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> CreateCustomerWithHttpInfoAsync(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Create Fiscal entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomerFiscalEntitiesResponse</returns>
        System.Threading.Tasks.Task<CreateCustomerFiscalEntitiesResponse> CreateCustomerFiscalEntitiesAsync(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Create Fiscal entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomerFiscalEntitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomerFiscalEntitiesResponse>> CreateCustomerFiscalEntitiesWithHttpInfoAsync(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Deleted a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> DeleteCustomerByIdAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Deleted a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> DeleteCustomerByIdWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Gets a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> GetCustomerByIdAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Gets a customer resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> GetCustomerByIdWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of customers
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersResponse</returns>
        System.Threading.Tasks.Task<CustomersResponse> GetCustomersAsync(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of customers
        /// </summary>
        /// <remarks>
        /// The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersResponse>> GetCustomersWithHttpInfoAsync(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// You can update customer-related data
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        System.Threading.Tasks.Task<CustomerResponse> UpdateCustomerAsync(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// You can update customer-related data
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerResponse>> UpdateCustomerWithHttpInfoAsync(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update  Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Update Fiscal Entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerFiscalEntitiesResponse</returns>
        System.Threading.Tasks.Task<UpdateCustomerFiscalEntitiesResponse> UpdateCustomerFiscalEntitiesAsync(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update  Fiscal Entity
        /// </summary>
        /// <remarks>
        /// Update Fiscal Entity resource that corresponds to a customer ID.
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerFiscalEntitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCustomerFiscalEntitiesResponse>> UpdateCustomerFiscalEntitiesWithHttpInfoAsync(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : ICustomersApiSync, ICustomersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApi : ICustomersApi
    {
        private DigitalFemsa.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi(string basePath)
        {
            this.Configuration = DigitalFemsa.net.Client.Configuration.MergeConfigurations(
                DigitalFemsa.net.Client.GlobalConfiguration.Instance,
                new DigitalFemsa.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DigitalFemsa.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApi(DigitalFemsa.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DigitalFemsa.net.Client.Configuration.MergeConfigurations(
                DigitalFemsa.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DigitalFemsa.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomersApi(DigitalFemsa.net.Client.ISynchronousClient client, DigitalFemsa.net.Client.IAsynchronousClient asyncClient, DigitalFemsa.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DigitalFemsa.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DigitalFemsa.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DigitalFemsa.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DigitalFemsa.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DigitalFemsa.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse CreateCustomer(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = CreateCustomerWithHttpInfo(customer, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<CustomerResponse> CreateCustomerWithHttpInfo(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'customer' is set
            if (customer == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'customer' when calling CustomersApi->CreateCustomer");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = customer;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomerResponse>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> CreateCustomerAsync(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = await CreateCustomerWithHttpInfoAsync(customer, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. 
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<CustomerResponse>> CreateCustomerWithHttpInfoAsync(Customer customer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customer' is set
            if (customer == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'customer' when calling CustomersApi->CreateCustomer");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = customer;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomerResponse>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomerFiscalEntitiesResponse</returns>
        public CreateCustomerFiscalEntitiesResponse CreateCustomerFiscalEntities(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<CreateCustomerFiscalEntitiesResponse> localVarResponse = CreateCustomerFiscalEntitiesWithHttpInfo(id, customerFiscalEntitiesRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomerFiscalEntitiesResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<CreateCustomerFiscalEntitiesResponse> CreateCustomerFiscalEntitiesWithHttpInfo(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->CreateCustomerFiscalEntities");
            }

            // verify the required parameter 'customerFiscalEntitiesRequest' is set
            if (customerFiscalEntitiesRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'customerFiscalEntitiesRequest' when calling CustomersApi->CreateCustomerFiscalEntities");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = customerFiscalEntitiesRequest;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomerFiscalEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCustomerFiscalEntitiesResponse>("/customers/{id}/fiscal_entities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerFiscalEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomerFiscalEntitiesResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomerFiscalEntitiesResponse> CreateCustomerFiscalEntitiesAsync(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<CreateCustomerFiscalEntitiesResponse> localVarResponse = await CreateCustomerFiscalEntitiesWithHttpInfoAsync(id, customerFiscalEntitiesRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Fiscal Entity Create Fiscal entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="customerFiscalEntitiesRequest">requested field for customer fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomerFiscalEntitiesResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<CreateCustomerFiscalEntitiesResponse>> CreateCustomerFiscalEntitiesWithHttpInfoAsync(string id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->CreateCustomerFiscalEntities");
            }

            // verify the required parameter 'customerFiscalEntitiesRequest' is set
            if (customerFiscalEntitiesRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'customerFiscalEntitiesRequest' when calling CustomersApi->CreateCustomerFiscalEntities");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = customerFiscalEntitiesRequest;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomerFiscalEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCustomerFiscalEntitiesResponse>("/customers/{id}/fiscal_entities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomerFiscalEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer Deleted a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse DeleteCustomerById(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = DeleteCustomerByIdWithHttpInfo(id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Customer Deleted a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<CustomerResponse> DeleteCustomerByIdWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->DeleteCustomerById");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "CustomersApi.DeleteCustomerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CustomerResponse>("/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer Deleted a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> DeleteCustomerByIdAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = await DeleteCustomerByIdWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Customer Deleted a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<CustomerResponse>> DeleteCustomerByIdWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->DeleteCustomerById");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "CustomersApi.DeleteCustomerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CustomerResponse>("/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Gets a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse GetCustomerById(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = GetCustomerByIdWithHttpInfo(id, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Gets a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<CustomerResponse> GetCustomerByIdWithHttpInfo(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->GetCustomerById");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "CustomersApi.GetCustomerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerResponse>("/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Gets a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> GetCustomerByIdAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = await GetCustomerByIdWithHttpInfoAsync(id, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Gets a customer resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<CustomerResponse>> GetCustomerByIdWithHttpInfoAsync(string id, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->GetCustomerById");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "CustomersApi.GetCustomerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerResponse>("/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersResponse</returns>
        public CustomersResponse GetCustomers(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<CustomersResponse> localVarResponse = GetCustomersWithHttpInfo(acceptLanguage, xChildCompanyId, limit, search, next, previous);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<CustomersResponse> GetCustomersWithHttpInfo(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "CustomersApi.GetCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersResponse>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersResponse</returns>
        public async System.Threading.Tasks.Task<CustomersResponse> GetCustomersAsync(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<CustomersResponse> localVarResponse = await GetCustomersWithHttpInfoAsync(acceptLanguage, xChildCompanyId, limit, search, next, previous, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of customers The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="limit">The numbers of items to return, the maximum value is 250 (optional, default to 20)</param>
        /// <param name="search">General order search, e.g. by mail, reference etc. (optional)</param>
        /// <param name="next">next page (optional)</param>
        /// <param name="previous">previous page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<CustomersResponse>> GetCustomersWithHttpInfoAsync(string acceptLanguage = default(string), string xChildCompanyId = default(string), int? limit = default(int?), string search = default(string), string next = default(string), string previous = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (previous != null)
            {
                localVarRequestOptions.QueryParameters.Add(DigitalFemsa.net.Client.ClientUtils.ParameterToMultiMap("", "previous", previous));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "CustomersApi.GetCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersResponse>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update customer You can update customer-related data
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerResponse</returns>
        public CustomerResponse UpdateCustomer(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = UpdateCustomerWithHttpInfo(id, updateCustomer, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer You can update customer-related data
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<CustomerResponse> UpdateCustomerWithHttpInfo(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->UpdateCustomer");
            }

            // verify the required parameter 'updateCustomer' is set
            if (updateCustomer == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'updateCustomer' when calling CustomersApi->UpdateCustomer");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = updateCustomer;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CustomerResponse>("/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update customer You can update customer-related data
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerResponse</returns>
        public async System.Threading.Tasks.Task<CustomerResponse> UpdateCustomerAsync(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<CustomerResponse> localVarResponse = await UpdateCustomerWithHttpInfoAsync(id, updateCustomer, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer You can update customer-related data
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="updateCustomer">requested field for customer</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<CustomerResponse>> UpdateCustomerWithHttpInfoAsync(string id, UpdateCustomer updateCustomer, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->UpdateCustomer");
            }

            // verify the required parameter 'updateCustomer' is set
            if (updateCustomer == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'updateCustomer' when calling CustomersApi->UpdateCustomer");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = updateCustomer;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomerResponse>("/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateCustomerFiscalEntitiesResponse</returns>
        public UpdateCustomerFiscalEntitiesResponse UpdateCustomerFiscalEntities(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateCustomerFiscalEntitiesResponse> localVarResponse = UpdateCustomerFiscalEntitiesWithHttpInfo(id, fiscalEntitiesId, customerUpdateFiscalEntitiesRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateCustomerFiscalEntitiesResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<UpdateCustomerFiscalEntitiesResponse> UpdateCustomerFiscalEntitiesWithHttpInfo(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->UpdateCustomerFiscalEntities");
            }

            // verify the required parameter 'fiscalEntitiesId' is set
            if (fiscalEntitiesId == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'fiscalEntitiesId' when calling CustomersApi->UpdateCustomerFiscalEntities");
            }

            // verify the required parameter 'customerUpdateFiscalEntitiesRequest' is set
            if (customerUpdateFiscalEntitiesRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'customerUpdateFiscalEntitiesRequest' when calling CustomersApi->UpdateCustomerFiscalEntities");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("fiscal_entities_id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(fiscalEntitiesId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = customerUpdateFiscalEntitiesRequest;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomerFiscalEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateCustomerFiscalEntitiesResponse>("/customers/{id}/fiscal_entities/{fiscal_entities_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerFiscalEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerFiscalEntitiesResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCustomerFiscalEntitiesResponse> UpdateCustomerFiscalEntitiesAsync(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateCustomerFiscalEntitiesResponse> localVarResponse = await UpdateCustomerFiscalEntitiesWithHttpInfoAsync(id, fiscalEntitiesId, customerUpdateFiscalEntitiesRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update  Fiscal Entity Update Fiscal Entity resource that corresponds to a customer ID.
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="fiscalEntitiesId">identifier</param>
        /// <param name="customerUpdateFiscalEntitiesRequest">requested field for customer update fiscal entities</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerFiscalEntitiesResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<UpdateCustomerFiscalEntitiesResponse>> UpdateCustomerFiscalEntitiesWithHttpInfoAsync(string id, string fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling CustomersApi->UpdateCustomerFiscalEntities");
            }

            // verify the required parameter 'fiscalEntitiesId' is set
            if (fiscalEntitiesId == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'fiscalEntitiesId' when calling CustomersApi->UpdateCustomerFiscalEntities");
            }

            // verify the required parameter 'customerUpdateFiscalEntitiesRequest' is set
            if (customerUpdateFiscalEntitiesRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'customerUpdateFiscalEntitiesRequest' when calling CustomersApi->UpdateCustomerFiscalEntities");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("fiscal_entities_id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(fiscalEntitiesId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = customerUpdateFiscalEntitiesRequest;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomerFiscalEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateCustomerFiscalEntitiesResponse>("/customers/{id}/fiscal_entities/{fiscal_entities_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomerFiscalEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
