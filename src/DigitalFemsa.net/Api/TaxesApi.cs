/*
 * Femsa API
 *
 * Femsa sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@femsa.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DigitalFemsa.net.Client;
using DigitalFemsa.net.Model;

namespace DigitalFemsa.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Tax
        /// </summary>
        /// <remarks>
        /// Create new taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateOrderTaxResponse</returns>
        UpdateOrderTaxResponse OrdersCreateTaxes(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Tax
        /// </summary>
        /// <remarks>
        /// Create new taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        ApiResponse<UpdateOrderTaxResponse> OrdersCreateTaxesWithHttpInfo(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete Tax
        /// </summary>
        /// <remarks>
        /// Delete taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateOrderTaxResponse</returns>
        UpdateOrderTaxResponse OrdersDeleteTaxes(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete Tax
        /// </summary>
        /// <remarks>
        /// Delete taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        ApiResponse<UpdateOrderTaxResponse> OrdersDeleteTaxesWithHttpInfo(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Tax
        /// </summary>
        /// <remarks>
        /// Update taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateOrderTaxResponse</returns>
        UpdateOrderTaxResponse OrdersUpdateTaxes(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Tax
        /// </summary>
        /// <remarks>
        /// Update taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        ApiResponse<UpdateOrderTaxResponse> OrdersUpdateTaxesWithHttpInfo(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Tax
        /// </summary>
        /// <remarks>
        /// Create new taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateOrderTaxResponse</returns>
        System.Threading.Tasks.Task<UpdateOrderTaxResponse> OrdersCreateTaxesAsync(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tax
        /// </summary>
        /// <remarks>
        /// Create new taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateOrderTaxResponse>> OrdersCreateTaxesWithHttpInfoAsync(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tax
        /// </summary>
        /// <remarks>
        /// Delete taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateOrderTaxResponse</returns>
        System.Threading.Tasks.Task<UpdateOrderTaxResponse> OrdersDeleteTaxesAsync(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tax
        /// </summary>
        /// <remarks>
        /// Delete taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateOrderTaxResponse>> OrdersDeleteTaxesWithHttpInfoAsync(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tax
        /// </summary>
        /// <remarks>
        /// Update taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateOrderTaxResponse</returns>
        System.Threading.Tasks.Task<UpdateOrderTaxResponse> OrdersUpdateTaxesAsync(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tax
        /// </summary>
        /// <remarks>
        /// Update taxes for an existing orden
        /// </remarks>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateOrderTaxResponse>> OrdersUpdateTaxesWithHttpInfoAsync(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxesApi : ITaxesApiSync, ITaxesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaxesApi : ITaxesApi
    {
        private DigitalFemsa.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxesApi(string basePath)
        {
            this.Configuration = DigitalFemsa.net.Client.Configuration.MergeConfigurations(
                DigitalFemsa.net.Client.GlobalConfiguration.Instance,
                new DigitalFemsa.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DigitalFemsa.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxesApi(DigitalFemsa.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DigitalFemsa.net.Client.Configuration.MergeConfigurations(
                DigitalFemsa.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DigitalFemsa.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DigitalFemsa.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaxesApi(DigitalFemsa.net.Client.ISynchronousClient client, DigitalFemsa.net.Client.IAsynchronousClient asyncClient, DigitalFemsa.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DigitalFemsa.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DigitalFemsa.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DigitalFemsa.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DigitalFemsa.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DigitalFemsa.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Tax Create new taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateOrderTaxResponse</returns>
        public UpdateOrderTaxResponse OrdersCreateTaxes(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> localVarResponse = OrdersCreateTaxesWithHttpInfo(id, orderTaxRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tax Create new taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> OrdersCreateTaxesWithHttpInfo(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling TaxesApi->OrdersCreateTaxes");
            }

            // verify the required parameter 'orderTaxRequest' is set
            if (orderTaxRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'orderTaxRequest' when calling TaxesApi->OrdersCreateTaxes");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = orderTaxRequest;

            localVarRequestOptions.Operation = "TaxesApi.OrdersCreateTaxes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateOrderTaxResponse>("/orders/{id}/tax_lines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersCreateTaxes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tax Create new taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateOrderTaxResponse</returns>
        public async System.Threading.Tasks.Task<UpdateOrderTaxResponse> OrdersCreateTaxesAsync(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> localVarResponse = await OrdersCreateTaxesWithHttpInfoAsync(id, orderTaxRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tax Create new taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="orderTaxRequest">requested field for a taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse>> OrdersCreateTaxesWithHttpInfoAsync(string id, OrderTaxRequest orderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling TaxesApi->OrdersCreateTaxes");
            }

            // verify the required parameter 'orderTaxRequest' is set
            if (orderTaxRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'orderTaxRequest' when calling TaxesApi->OrdersCreateTaxes");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = orderTaxRequest;

            localVarRequestOptions.Operation = "TaxesApi.OrdersCreateTaxes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateOrderTaxResponse>("/orders/{id}/tax_lines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersCreateTaxes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tax Delete taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateOrderTaxResponse</returns>
        public UpdateOrderTaxResponse OrdersDeleteTaxes(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> localVarResponse = OrdersDeleteTaxesWithHttpInfo(id, taxId, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tax Delete taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> OrdersDeleteTaxesWithHttpInfo(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling TaxesApi->OrdersDeleteTaxes");
            }

            // verify the required parameter 'taxId' is set
            if (taxId == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'taxId' when calling TaxesApi->OrdersDeleteTaxes");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("tax_id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(taxId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "TaxesApi.OrdersDeleteTaxes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<UpdateOrderTaxResponse>("/orders/{id}/tax_lines/{tax_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersDeleteTaxes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tax Delete taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateOrderTaxResponse</returns>
        public async System.Threading.Tasks.Task<UpdateOrderTaxResponse> OrdersDeleteTaxesAsync(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> localVarResponse = await OrdersDeleteTaxesWithHttpInfoAsync(id, taxId, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tax Delete taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse>> OrdersDeleteTaxesWithHttpInfoAsync(string id, string taxId, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling TaxesApi->OrdersDeleteTaxes");
            }

            // verify the required parameter 'taxId' is set
            if (taxId == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'taxId' when calling TaxesApi->OrdersDeleteTaxes");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("tax_id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(taxId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }

            localVarRequestOptions.Operation = "TaxesApi.OrdersDeleteTaxes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<UpdateOrderTaxResponse>("/orders/{id}/tax_lines/{tax_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersDeleteTaxes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tax Update taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateOrderTaxResponse</returns>
        public UpdateOrderTaxResponse OrdersUpdateTaxes(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> localVarResponse = OrdersUpdateTaxesWithHttpInfo(id, taxId, updateOrderTaxRequest, acceptLanguage, xChildCompanyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tax Update taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateOrderTaxResponse</returns>
        public DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> OrdersUpdateTaxesWithHttpInfo(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling TaxesApi->OrdersUpdateTaxes");
            }

            // verify the required parameter 'taxId' is set
            if (taxId == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'taxId' when calling TaxesApi->OrdersUpdateTaxes");
            }

            // verify the required parameter 'updateOrderTaxRequest' is set
            if (updateOrderTaxRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'updateOrderTaxRequest' when calling TaxesApi->OrdersUpdateTaxes");
            }

            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("tax_id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(taxId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = updateOrderTaxRequest;

            localVarRequestOptions.Operation = "TaxesApi.OrdersUpdateTaxes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateOrderTaxResponse>("/orders/{id}/tax_lines/{tax_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersUpdateTaxes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tax Update taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateOrderTaxResponse</returns>
        public async System.Threading.Tasks.Task<UpdateOrderTaxResponse> OrdersUpdateTaxesAsync(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse> localVarResponse = await OrdersUpdateTaxesWithHttpInfoAsync(id, taxId, updateOrderTaxRequest, acceptLanguage, xChildCompanyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tax Update taxes for an existing orden
        /// </summary>
        /// <exception cref="DigitalFemsa.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the resource</param>
        /// <param name="taxId">identifier</param>
        /// <param name="updateOrderTaxRequest">requested field for taxes</param>
        /// <param name="acceptLanguage">Use for knowing which language to use (optional, default to es)</param>
        /// <param name="xChildCompanyId">In the case of a holding company, the company id of the child company to which will process the request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateOrderTaxResponse)</returns>
        public async System.Threading.Tasks.Task<DigitalFemsa.net.Client.ApiResponse<UpdateOrderTaxResponse>> OrdersUpdateTaxesWithHttpInfoAsync(string id, string taxId, UpdateOrderTaxRequest updateOrderTaxRequest, string acceptLanguage = default(string), string xChildCompanyId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'id' when calling TaxesApi->OrdersUpdateTaxes");
            }

            // verify the required parameter 'taxId' is set
            if (taxId == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'taxId' when calling TaxesApi->OrdersUpdateTaxes");
            }

            // verify the required parameter 'updateOrderTaxRequest' is set
            if (updateOrderTaxRequest == null)
            {
                throw new DigitalFemsa.net.Client.ApiException(400, "Missing required parameter 'updateOrderTaxRequest' when calling TaxesApi->OrdersUpdateTaxes");
            }


            DigitalFemsa.net.Client.RequestOptions localVarRequestOptions = new DigitalFemsa.net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.app-v2.1.0+json"
            };

            var localVarContentType = DigitalFemsa.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DigitalFemsa.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("tax_id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(taxId)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", DigitalFemsa.net.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            if (xChildCompanyId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Child-Company-Id", DigitalFemsa.net.Client.ClientUtils.ParameterToString(xChildCompanyId)); // header parameter
            }
            localVarRequestOptions.Data = updateOrderTaxRequest;

            localVarRequestOptions.Operation = "TaxesApi.OrdersUpdateTaxes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateOrderTaxResponse>("/orders/{id}/tax_lines/{tax_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrdersUpdateTaxes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
