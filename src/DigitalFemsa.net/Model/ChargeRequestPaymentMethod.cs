/*
 * Femsa API
 *
 * Femsa sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@femsa.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DigitalFemsa.net.Client.OpenAPIDateConverter;

namespace DigitalFemsa.net.Model
{
    /// <summary>
    /// Payment method used in the charge. Go to the [payment methods](https://developers.femsa.com/reference/m%C3%A9todos-de-pago) section for more details 
    /// </summary>
    [DataContract(Name = "charge_request_payment_method")]
    public partial class ChargeRequestPaymentMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeRequestPaymentMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeRequestPaymentMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeRequestPaymentMethod" /> class.
        /// </summary>
        /// <param name="expiresAt">Method expiration date as unix timestamp.</param>
        /// <param name="type">type (required).</param>
        /// <param name="paymentSourceId">paymentSourceId.</param>
        public ChargeRequestPaymentMethod(long expiresAt = default(long), string type = default(string), string paymentSourceId = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ChargeRequestPaymentMethod and cannot be null");
            }
            this.Type = type;
            this.ExpiresAt = expiresAt;
            this.PaymentSourceId = paymentSourceId;
        }

        /// <summary>
        /// Method expiration date as unix timestamp
        /// </summary>
        /// <value>Method expiration date as unix timestamp</value>
        /// <example>1677196303</example>
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public long ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <example>cash</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSourceId
        /// </summary>
        /// <example>src_2tLkkyfMPh6v7pFry</example>
        [DataMember(Name = "payment_source_id", EmitDefaultValue = false)]
        public string PaymentSourceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeRequestPaymentMethod {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PaymentSourceId: ").Append(PaymentSourceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
